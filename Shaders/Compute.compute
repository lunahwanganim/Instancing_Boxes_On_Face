#pragma kernel Update

#include "../Libraries/header.cginc"
#include "../Libraries/Quaternion.cginc"
#define NB_INIT_THREADS_PER_GROUP 256
#define NB_UPDATE_THREADS_PER_GROUP 256
struct BoxPrimUV
{
    uint Sourceprim;
    float2 Sourceprimuv;
};
struct BoxRender
{
    float3 Position;
    float4 Rot;
    float Pscale;
};
struct Vertex
{
    float3 Position;
    float3 Normal;
    float4 Tangent;
};
RWStructuredBuffer<int> _BufferVtxId;
RWStructuredBuffer<Vertex> _BufferVertex;
RWStructuredBuffer<BoxPrimUV> _BufferBoxPrimUV;
RWStructuredBuffer<BoxRender> _BufferBoxRender;
float4x4 _Transform;

[numthreads(NB_UPDATE_THREADS_PER_GROUP,1,1)]
void Update (uint3 DTid : SV_DispatchThreadID)
{
    BoxPrimUV PrimUV_data = _BufferBoxPrimUV[DTid.x];
    uint     sourceprim = PrimUV_data.Sourceprim;
    float2  sourceprimuv = PrimUV_data.Sourceprimuv;
    BoxRender BoxRender_data = _BufferBoxRender[DTid.x];
    uint     vtx_id_0 = _BufferVtxId[sourceprim * 3 + 0];
    uint     vtx_id_1 = _BufferVtxId[sourceprim * 3 + 1];
    uint     vtx_id_2 = _BufferVtxId[sourceprim * 3 + 2];
    float3  pos_vtx_0 = _BufferVertex[vtx_id_0].Position;
    float3  pos_vtx_1 = _BufferVertex[vtx_id_1].Position;
    float3  pos_vtx_2 = _BufferVertex[vtx_id_2].Position;
    float3  pos = pos_vtx_0 + 
                  (pos_vtx_1 - pos_vtx_0) * sourceprimuv.x + 
                  (pos_vtx_2 - pos_vtx_0) * sourceprimuv.y;
    pos = (mul(_Transform, float4(pos.x, pos.y, pos.z, 1.0))).xyz;
    BoxRender_data.Position = pos;
    _BufferBoxRender[DTid.x] = BoxRender_data;
}
